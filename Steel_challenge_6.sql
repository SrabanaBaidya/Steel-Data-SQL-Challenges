/*1. How many transactions were completed during each marketing campaign?*/

SELECT m.campaign_name,COUNT(DISTINCT t.transaction_id) AS transaction_count
FROM marketing_campaigns AS m INNER JOIN transactions AS t
ON m.product_id=t.product_id
GROUP BY m.campaign_name
ORDER BY COUNT(DISTINCT t.transaction_id) DESC;


/*2. Which product had the highest sales quantity?*/

WITH cte as (
select t.product_id,product_name, sum(quantity) as total_quantity
from transactions as t 
join sustainable_clothing  as sc on t.product_id = sc.product_id  
group by 1 , 2
order by total_quantity ) 

select *
from cte 
where total_quantity in (select max(total_quantity) from cte) ;

/*3. What is the total revenue generated from each marketing campaign?*/

SELECT m.campaign_name,ROUND(SUM(c.price * t.quantity),2) AS total_revenue_generated
FROM marketing_campaigns AS m INNER JOIN transactions AS t
ON m.product_id=t.product_id
INNER JOIN sustainable_clothing AS c
ON c.product_id=t.product_id
GROUP BY m.campaign_name
ORDER BY SUM(c.price * t.quantity) DESC;


/*4. What is the top-selling product category based on the total revenue generated?*/

SELECT c.category,ROUND(SUM(c.price * t.quantity),2) AS total_revenue_generated
FROM sustainable_clothing AS c
INNER JOIN transactions2 AS t
ON c.product_id=t.product_id
GROUP BY c.category
ORDER BY SUM(c.price * t.quantity) DESC
LIMIT 1;    

/*5. Which products had a higher quantity sold compared to the average quantity sold?*/

WITH Qtysold AS(SELECT c.product_name,SUM(t.quantity) AS qty_sold, AVG(t.quantity) avg_qty_sold
FROM transactions2 AS t INNER JOIN sustainable_clothing AS c
ON t.product_id=c.product_id
GROUP BY c.product_name)

SELECT product_name,qty_sold
FROM Qtysold
WHERE qty_sold>avg_qty_sold
ORDER BY qty_sold DESC;
		

/*6. What is the average revenue generated per day during the marketing campaigns?*/

SELECT ROUND(AVG(c.price * t.quantity),2) AS revenue_generated_per_day
FROM marketing_campaigns AS m
INNER JOIN transactions AS t ON m.product_id = t.product_id
INNER JOIN sustainable_clothing AS c ON c.product_id = t.product_id
WHERE t.purchase_date BETWEEN m.start_date and m.end_date;

/*7. What is the percentage contribution of each product to the total revenue?*/  
 
With cte1 as 
(select round(sum(quantity*price),2) as total_revenue
from transactions t
join sustainable_clothing s on t.product_id = s.product_id),

cte2 as                                                             
(select product_name ,round(sum(quantity*price),2) as total_product_revenue
from transactions t
join sustainable_clothing s on t.product_id = s.product_id
group by product_name)

select product_name , 
       round((total_product_revenue*100)/total_revenue,2) as per_contribution
from cte1,cte2 ;       
       
       
/*8. Compare the average quantity sold during 
marketing campaigns to outside the marketing campaigns*/

#Method:1
select case when mc.campaign_id is not null then 'marketing campaigns' else 'outside of marketing campaigns' 
end as Transaction_type,avg(t.quantity) as "average_quantity_sold" from transactions t
left join marketing_campaigns mc on t.product_id = mc.product_id
group by  Transaction_type;

#Method:2:
WITH campaign_quantity AS (SELECT mc.campaign_name,AVG(t.quantity) as average_quantity_sold
FROM marketing_campaigns mc
JOIN transactions2 t ON mc.product_id = t.product_id
GROUP BY mc.campaign_name),

outside_campaign_quantity AS (SELECT 'Outside Campaigns' as campaign_name,
AVG(t.quantity) as average_quantity_sold FROM transactions2 t
WHERE t.product_id NOT IN (SELECT product_id FROM marketing_campaigns))

SELECT * FROM campaign_quantity
UNION ALL
SELECT * FROM outside_campaign_quantity;


/*9. Compare the revenue generated by products inside the marketing campaigns to outside the campaigns*/
#Method-1:
select case when mc.campaign_id is not null then 'marketing campaigns'
else 'outside of marketing campaigns' end as transaction_type,sum(t.quantity * sc.price) as revenue
from transactions t
left join marketing_campaigns mc on t.product_id = mc.product_id
join sustainable_clothing sc on t.product_id = sc.product_id
group by transaction_type

#Method:2:
WITH campaign_revenue AS (SELECT mc.campaign_name,
ROUND(SUM(t.quantity * sc.price),2) as total_revenue FROM marketing_campaigns mc
JOIN transactions2 t ON mc.product_id = t.product_id
JOIN sustainable_clothing sc ON mc.product_id = sc.product_id
GROUP BY ampaign_name),

outside_campaign_revenue AS (SELECT 'Outside Campaigns' as campaign_name,
ROUND(SUM(t.quantity * sc.price),2) as total_revenue FROM 
transactions2 t JOIN sustainable_clothing sc ON t.product_id = sc.product_id
WHERE t.product_id NOT IN (SELECT product_id FROM marketing_campaigns))

SELECT * FROM campaign_revenue
UNION ALL
SELECT * FROM outside_campaign_revenue;


/*10. Rank the products by their average daily quantity sold.*/

With cte as
(select product_name , avg(quantity) as avg_sold_qty
from transactions t 
join sustainable_clothing s on t.product_id = s. product_id 
group by 1)

select product_name, avg_sold_qty ,
 dense_rank() over (order by avg_sold_qty) as rnk_avg
from cte ; 